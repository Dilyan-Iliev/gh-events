name: Deploy website
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm # path that should be cached
          # cache key - retrieve the cache by its key later
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} 
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs: # The outputs section in a job allows you to define values 
             # that can be used as inputs in subsequent jobs
      script-file: ${{ steps.publish.outputs.script-file }} #hold info about our steps
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm # path that should be cached
          # cache key - retrieve the cache by its key later
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }} 
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
        # Outputs script-file=filename.js to $GITHUB_OUTPUT, which is a special environment variable provided by GitHub Actions
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          # give name of the artifacts so we could retrieve them by name
          name: dist-files
          # path - where to find the files that should be stored (in the virtual machine)
          path: dist # dist folder

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          # we must specify artifact identifier
          # we must provide the same name of the artifact files
          name: dist-files
      - name: Output content
        run: ls
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
